import * as React from 'react'

/*function Name({name, onNameChange}) {
  return (
    <div>
      <label htmlFor="name">Name: </label>
      <input id="name" value={name} onChange={onNameChange} />
    </div>
  )
}
*/

function Name() {
  const [name, setName] = React.useState ('')
  return (
    <div>
      <label htmlFor="name">Name: </label>
      <input id="name" value={name} onChange={event => setName (event.target.value)} />
    </div>
  )
}

// üê® accept `animal` and `onAnimalChange` props to this component
function FavoriteAnimal({animal, onAnimalChange}) {
  return (
    <div>
      <label htmlFor="animal">Favorite Animal: </label>
      <input
        id="animal"
        value={animal}
        onChange={onAnimalChange}
      />
    </div>
  )
}

// üê® uncomment this
/*function Display({name, animal}) {
  return <div>{`Hey ${name}, your favorite animal is: ${animal}!`}</div>
}
*/
function Display({animal}) {
  return <div>{`Your favorite animal is: ${animal}!`}</div>
}
/*
  ELEVA√á√ÉO DE ESTADO (state lifting) acontece quando estados precisam ser compartilhados entre
  componentes irm√£os. Como dois irm√£os n√£o podem compartilhar diretamente
  seus estados entre si, seus estados precisam ser deslocados para o 
  componente pai.

  REBAIXAMENTO DE ESTADO (state colocation) ocorre quando um estado n√£o precisa
  mais ser compartilhado entre componentes irm√£os. Nesses casos, podemos
  retirar o estado compartilhado do componente pai e devolv√™-lo para 
  o componente filho. 
*/

// üí£ remove this component in favor of the new one
//function Display({name}) {
//  return <div>{`Hey ${name}, you are great!`}</div>
//}

export default function Exercicio03() {
  // üê® add a useState for the animal

 // function handleNameChange (event) {
 //   setName(event.target.value)
 // } PODE SER ESCRITO DIRETO UMA ARROW FUNCTION 

  function handleAnimalChange (event){
    setAnimal (event.target.value)
  }

  //const [name, setName] = React.useState('')
  const [animal, setAnimal] = React.useState ('')
  return (
    <form>
      {/*<Name name={name} onNameChange={event => setName (event.target.value)} />*/}
      <Name/>
      {/* üê® pass the animal and onAnimalChange prop here (similar to the Name component above) */}
      <FavoriteAnimal animal={animal} onAnimalChange={handleAnimalChange}/>
      {/* üê® pass the animal prop here */}
      {/*<Display name={name} animal={animal} />*/}
      <Display animal={animal}/>
    </form>
  )
}